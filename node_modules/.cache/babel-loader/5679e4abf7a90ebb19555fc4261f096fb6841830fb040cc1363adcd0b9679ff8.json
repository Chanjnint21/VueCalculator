{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '../assets/styles.css';\nimport BtnComponent from './BtnComponent.vue';\nimport TextFiles from './TextFiles.vue';\nexport default {\n  props: {\n    // Rcolor: {\n    // \ttype: String,\n    // \tdefault: 'warning',\n    // },\n    Switch: {\n      type: Boolean\n    }\n  },\n  components: {\n    BtnComponent,\n    TextFiles\n  },\n  data() {\n    return {\n      Value1: '',\n      Value2: '',\n      method: '....',\n      Ans: '',\n      MainID: '',\n      ContainerID: '',\n      history: []\n      // rulesNumber: v => {\n      // \tif (!v.trim()) return true;\n      // \tif (!isNaN(parseFloat(v)) && v >= 0 && v <= 999) return true;\n      // \treturn 'The Input must be in number !!!';\n      // },\n    };\n  },\n\n  watch: {\n    //check the switch if it true toggle Id to dark mode\n    Switch() {\n      if (this.Switch) {\n        this.MainID = 'MainID';\n        this.ContainerID = 'ContainerID';\n      } else {\n        this.MainID = '';\n        this.ContainerID = '';\n      }\n    }\n  },\n  computed: {\n    // check if the text field of value 1 or 2 is not number show alert\n    // showAlert() {\n    //     return isNaN(this.Value1) || isNaN(this.Value2)\n    // },\n    // check if the text field of value 1 or 2 empty disable button\n    isBtnValid() {\n      return this.Value1 !== '' && this.Value2 !== '';\n    }\n  },\n  methods: {\n    reset: function () {\n      this.method = '....';\n      this.Value1 = '';\n      this.Value2 = '';\n      this.Ans = '';\n    },\n    ToHistory(Symbol) {\n      this.history.push(`${this.Value1} ${Symbol} ${this.Value2} = ${this.Ans}`);\n    },\n    FloatParse() {\n      if (this.Ans === '') return; //if the Ans is empty dun parse\n      this.Ans = Math.round(this.Ans * 100) / 100;\n      this.ToHistory(this.method); // if the Ans already parse, just return\n    },\n\n    ADD: function () {\n      this.method = \"+\";\n      // this.Ans = Number(this.Value1) + Number(this.Value2);\n      // this.ToHistory('+')\n    },\n\n    SUB: function () {\n      this.method = \"-\";\n      this.Ans = Number(this.Value1) - Number(this.Value2);\n      this.ToHistory('-');\n    },\n    MULTI: function () {\n      this.method = \"&times;\";\n      this.Ans = Number(this.Value1) * Number(this.Value2);\n      this.ToHistory('&times;');\n    },\n    DEV: function () {\n      this.method = \"&divide;\";\n      this.Ans = Number(this.Value1) / Number(this.Value2);\n      this.ToHistory('&divide;');\n    }\n  }\n};","map":{"version":3,"names":["BtnComponent","TextFiles","props","Switch","type","Boolean","components","data","Value1","Value2","method","Ans","MainID","ContainerID","history","watch","computed","isBtnValid","methods","reset","ToHistory","Symbol","push","FloatParse","Math","round","ADD","SUB","Number","MULTI","DEV"],"sources":["src/components/VueCalculator.vue"],"sourcesContent":["<template>\n\t<v-main class=\"d-flex align-center justify-center\" :id=\"MainID\">\n\t\t<v-container class=\"area-calculator bg-surface-variant rounded-lg px-12 \" :id=\"ContainerID\">\n\t\t\t<v-row>\n\t\t\t\t<!-- Alert -->\n\t\t\t\t<!-- <v-col cols=\"12\"><v-alert text danse outlined type=\"warning\" v-if=\"showAlert\" :value=\"showAlert\"\n                        @input=\"showAlert = false\">Value that are not number will case the error in calculating\n                        !</v-alert></v-col> -->\n\n\t\t\t\t<!-- value input 1-->\n\t\t\t\t<v-col class=\"mt-5\" cols=\"5\"><TextFiles textcolor=\"success\" textlabel=\"1st Value\" Regular>\t</TextFiles></v-col>\n\t\t\t\t<!-- <v-col class=\"mt-5\" cols=\"5\"><v-text-field color=\"green\" label=\"1st Value\" v-model=\"Value1\" :rules=\"[rulesNumber]\"\n\t\t\t\t\t\toutlined></v-text-field></v-col> -->\n\n\t\t\t\t<!-- display the method -->\n\t\t\t\t<v-col class=\"d-flex align-center justify-center\">\n\t\t\t\t\t<p v-html=\"method\"></p>\n\t\t\t\t</v-col>\n\n\t\t\t\t<!-- value input 2-->\n\t\t\t\t<!-- <v-col class=\"mt-5\" cols=\"5\"><v-text-field color=\"green\" label=\"2nd Value\" v-model=\"Value2\" :rules=\"[rulesNumber]\"\n\t\t\t\t\t\toutlined></v-text-field></v-col> -->\n\t\t\t\t<v-col class=\"mt-5\" cols=\"5\"><TextFiles textcolor=\"success\" textlabel=\"2st Value\">\t</TextFiles></v-col>\n\n\t\t\t\t<!-- icon click for histor -->\n\t\t\t\t<v-col class=\"d-flex align-center justify-center mb-2\">\n\t\t\t\t\t<CalHistory :history=\"history\"></CalHistory>\n\t\t\t\t</v-col>\n\n\t\t\t\t<!-- Result (readonly text field) -->\n\t\t\t\t<v-col cols=\"12\"><v-text-field label=\"=\" color=\"green\" variant=\"solo\" :value=\"Ans\"\n\t\t\t\t\t\treadonly></v-text-field></v-col>\n\t\t\t</v-row>\n\t\t\t<!-- method btns and clear btn -->\n\t\t\t<v-row class=\"text-center\">\n\t\t\t\t<v-col cols=\"2\"><BtnComponent v-on:click=\"ADD\" CalMethod=\"+\"></BtnComponent></v-col>\n\t\t\t\t<v-col cols=\"2\"><BtnComponent CalMethod=\"-\"></BtnComponent></v-col>\n\t\t\t\t<v-col cols=\"2\"><BtnComponent CalMethod=\"&times;\"></BtnComponent></v-col>\n\t\t\t\t<v-col cols=\"2\"><BtnComponent CalMethod=\"&divide;\"></BtnComponent></v-col>\n\t\t\t\t<v-col cols=\"2\"><BtnComponent btncolor=\"error\" CalMethod=\"C\"></BtnComponent></v-col>\n\t\t\t\t<v-col cols=\"2\"><BtnComponent btncolor=\"success\" CalMethod=\".00\"></BtnComponent></v-col>\n\t\t\t\t<!-- <v-col cols=\"2\"><v-btn @click=\"ADD\" :disabled=\"!isBtnValid\"> + </v-btn></v-col>\n\t\t\t\t<v-col cols=\"2\"><v-btn @click=\"SUB\" :disabled=\"!isBtnValid\"> - </v-btn></v-col>\n\t\t\t\t<v-col cols=\"2\"><v-btn @click=\"MULTI\" :disabled=\"!isBtnValid\"> &times; </v-btn></v-col>\n\t\t\t\t<v-col cols=\"2\"><v-btn @click=\"DEV\" :disabled=\"!isBtnValid\"> &divide; </v-btn></v-col>\n\t\t\t\t<v-col cols=\"2\"><v-btn :color=\"Rcolor\" v-on:click=\"reset\" > C </v-btn></v-col>\n\t\t\t\t<v-col class=\"mb-5\" cols=\"2\"><v-btn v-on:click=\"FloatParse\" color=\"success\">.00</v-btn></v-col> -->\n\t\t\t</v-row>\n\t\t</v-container>\n\t</v-main>\n</template>\n\n<script>\nimport '../assets/styles.css'\nimport BtnComponent from './BtnComponent.vue';\nimport TextFiles from './TextFiles.vue';\n\nexport default {\n\tprops: {\n\t\t// Rcolor: {\n\t\t// \ttype: String,\n\t\t// \tdefault: 'warning',\n\t\t// },\n\t\tSwitch: {\n\t\t\ttype: Boolean\n\t\t}\n\t},\n\tcomponents:{\n\t\tBtnComponent,\n\t\tTextFiles\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tValue1: '',\n\t\t\tValue2: '',\n\t\t\tmethod: '....',\n\t\t\tAns: '',\n\t\t\tMainID: '',\n\t\t\tContainerID: '',\n\t\t\thistory: [],\n\t\t\t// rulesNumber: v => {\n\t\t\t// \tif (!v.trim()) return true;\n\t\t\t// \tif (!isNaN(parseFloat(v)) && v >= 0 && v <= 999) return true;\n\t\t\t// \treturn 'The Input must be in number !!!';\n\t\t\t// },\n\n\t\t}\n\t},\n\twatch: {\n\t\t//check the switch if it true toggle Id to dark mode\n\t\tSwitch() {\n\t\t\tif (this.Switch) {\n\t\t\t\tthis.MainID = 'MainID';\n\t\t\t\tthis.ContainerID = 'ContainerID'\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.MainID = ''\n\t\t\t\tthis.ContainerID = ''\n\t\t\t}\n\t\t},\n\t},\n\tcomputed: {\n\t\t// check if the text field of value 1 or 2 is not number show alert\n\t\t// showAlert() {\n\t\t//     return isNaN(this.Value1) || isNaN(this.Value2)\n\t\t// },\n\t\t// check if the text field of value 1 or 2 empty disable button\n\t\tisBtnValid() {\n\t\t\treturn this.Value1 !== '' && this.Value2 !== ''\n\t\t},\n\t},\n\tmethods: {\n\t\treset: function () {\n\t\t\tthis.method = '....'\n\t\t\tthis.Value1 = '';\n\t\t\tthis.Value2 = '';\n\t\t\tthis.Ans = ''\n\t\t},\n\t\tToHistory(Symbol) {\n\t\t\tthis.history.push(`${this.Value1} ${Symbol} ${this.Value2} = ${this.Ans}`)\n\t\t},\n\t\tFloatParse() {\n\t\t\tif (this.Ans === '') return; //if the Ans is empty dun parse\n\t\t\tthis.Ans = Math.round(this.Ans * 100) / 100\n\t\t\tthis.ToHistory(this.method); // if the Ans already parse, just return\n\n\t\t},\n\t\tADD: function () {\n\t\t\tthis.method = \"+\"\n\t\t\t// this.Ans = Number(this.Value1) + Number(this.Value2);\n\t\t\t// this.ToHistory('+')\n\t\t},\n\t\tSUB: function () {\n\t\t\tthis.method = \"-\"\n\t\t\tthis.Ans = Number(this.Value1) - Number(this.Value2);\n\t\t\tthis.ToHistory('-')\n\t\t},\n\t\tMULTI: function () {\n\t\t\tthis.method = \"&times;\"\n\t\t\tthis.Ans = Number(this.Value1) * Number(this.Value2);\n\t\t\tthis.ToHistory('&times;')\n\t\t},\n\t\tDEV: function () {\n\t\t\tthis.method = \"&divide;\"\n\t\t\tthis.Ans = Number(this.Value1) / Number(this.Value2);\n\t\t\tthis.ToHistory('&divide;')\n\t\t},\n\n\t},\n}\n</script>"],"mappings":";AAqDA;AACA,OAAAA,YAAA;AACA,OAAAC,SAAA;AAEA;EACAC,KAAA;IACA;IACA;IACA;IACA;IACAC,MAAA;MACAC,IAAA,EAAAC;IACA;EACA;EACAC,UAAA;IACAN,YAAA;IACAC;EACA;EACAM,KAAA;IACA;MACAC,MAAA;MACAC,MAAA;MACAC,MAAA;MACAC,GAAA;MACAC,MAAA;MACAC,WAAA;MACAC,OAAA;MACA;MACA;MACA;MACA;MACA;IAEA;EACA;;EACAC,KAAA;IACA;IACAZ,OAAA;MACA,SAAAA,MAAA;QACA,KAAAS,MAAA;QACA,KAAAC,WAAA;MACA,OACA;QACA,KAAAD,MAAA;QACA,KAAAC,WAAA;MACA;IACA;EACA;EACAG,QAAA;IACA;IACA;IACA;IACA;IACA;IACAC,WAAA;MACA,YAAAT,MAAA,gBAAAC,MAAA;IACA;EACA;EACAS,OAAA;IACAC,KAAA,WAAAA,CAAA;MACA,KAAAT,MAAA;MACA,KAAAF,MAAA;MACA,KAAAC,MAAA;MACA,KAAAE,GAAA;IACA;IACAS,UAAAC,MAAA;MACA,KAAAP,OAAA,CAAAQ,IAAA,SAAAd,MAAA,IAAAa,MAAA,SAAAZ,MAAA,WAAAE,GAAA;IACA;IACAY,WAAA;MACA,SAAAZ,GAAA;MACA,KAAAA,GAAA,GAAAa,IAAA,CAAAC,KAAA,MAAAd,GAAA;MACA,KAAAS,SAAA,MAAAV,MAAA;IAEA;;IACAgB,GAAA,WAAAA,CAAA;MACA,KAAAhB,MAAA;MACA;MACA;IACA;;IACAiB,GAAA,WAAAA,CAAA;MACA,KAAAjB,MAAA;MACA,KAAAC,GAAA,GAAAiB,MAAA,MAAApB,MAAA,IAAAoB,MAAA,MAAAnB,MAAA;MACA,KAAAW,SAAA;IACA;IACAS,KAAA,WAAAA,CAAA;MACA,KAAAnB,MAAA;MACA,KAAAC,GAAA,GAAAiB,MAAA,MAAApB,MAAA,IAAAoB,MAAA,MAAAnB,MAAA;MACA,KAAAW,SAAA;IACA;IACAU,GAAA,WAAAA,CAAA;MACA,KAAApB,MAAA;MACA,KAAAC,GAAA,GAAAiB,MAAA,MAAApB,MAAA,IAAAoB,MAAA,MAAAnB,MAAA;MACA,KAAAW,SAAA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}