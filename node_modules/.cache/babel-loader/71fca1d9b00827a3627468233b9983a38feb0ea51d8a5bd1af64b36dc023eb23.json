{"ast":null,"code":"export default {\n  props: {\n    Value: Number\n  },\n  data() {\n    return {\n      Value1: '',\n      Value2: '',\n      Ans: ''\n    };\n  },\n  watch: {\n    Ans(newVal, oldVal) {\n      // const V1 = parseFloat(newVal)\n      // const V2 = parseFloat(oldVal)\n      if (isNaN(newVal)) {\n        alert('The following Value input is invalid');\n        console.log(oldVal);\n      }\n    }\n  },\n  methods: {\n    reset: function () {\n      this.Value1 = '';\n      this.Value2 = '';\n      this.Ans = '';\n    },\n    add: function () {\n      const sum = parseFloat(this.Value1) + parseFloat(this.Value2);\n      this.Ans = sum;\n    },\n    sub: function () {\n      const sum = parseFloat(this.Value1) - parseFloat(this.Value2);\n      this.Ans = sum;\n    },\n    multi: function () {\n      const sum = parseFloat(this.Value1) * parseFloat(this.Value2);\n      this.Ans = sum;\n    },\n    dev: function () {\n      const sum = parseFloat(this.Value1) / parseFloat(this.Value2);\n      this.Ans = sum;\n    }\n    // Equals: function(){\n    //     this.Ans = eval(this.Value)\n    //     console.log(this.Ans);\n    // }\n  }\n};","map":{"version":3,"names":["props","Value","Number","data","Value1","Value2","Ans","watch","newVal","oldVal","isNaN","alert","console","log","methods","reset","add","sum","parseFloat","sub","multi","dev"],"sources":["src/components/VueCalculator.vue"],"sourcesContent":["<template>\n    <v-container class=\"bg-surface-variant\">\n        <v-row>\n            <v-col><v-alert\n    v-if=\"showAlert\"\n    :value=\"showAlert\"\n    type=\"success\"\n    dismissible\n    @input=\"showAlert = false\"\n  >\n    Your alert message goes here!\n  </v-alert>\n</v-col>\n            <v-col cols=\"12\"><v-text-field type=\"text\" label=\"1st Value\" variant=\"solo\" v-model=\"Value1\"></v-text-field></v-col>\n            <v-col cols=\"12\"><v-text-field type=\"text\" label=\"2nd Value\" variant=\"solo\" v-model=\"Value2\"></v-text-field></v-col>\n            <!-- <input type=\"text\" :value=\"value\" @input=\"$emit('input', $event.target.value)\" /> -->\n            <v-col><v-text-field label=\"=\" variant=\"solo\" v-model=\"Ans\" model-value=\"0\" readonly ></v-text-field></v-col>\n        </v-row>\n        <v-row class=\"text-center\">\n            <v-col cols=\"2\"><v-btn v-on:click=\"add\">+</v-btn></v-col>\n            <v-col cols=\"2\"><v-btn v-on:click=\"sub\">-</v-btn></v-col>\n            <v-col cols=\"2\"><v-btn v-on:click=\"multi\">x</v-btn></v-col>\n            <v-col cols=\"2\"><v-btn v-on:click=\"dev\">/</v-btn></v-col>\n            <!-- <v-col cols=\"2\"><v-btn color=\"green\" v-on:click=\"Equals\">=</v-btn></v-col> -->\n            <v-col cols=\"4\"><v-btn color=\"red\" v-on:click=\"reset\" block>C</v-btn></v-col>\n        </v-row>\n        <!-- <v-row >\n            <v-col cols=\"3\"><v-btn>9</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>8</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>7</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>+</v-btn></v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"3\"><v-btn>6</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>5</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>4</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>-</v-btn></v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"3\"><v-btn>3</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>2</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>1</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>x</v-btn></v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"3\"><v-btn color=\"red\" v-on:click=\"reset\">C</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>0</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn color=\"green\" v-on:click=\"Equals\">=</v-btn></v-col>\n            <v-col cols=\"3\"><v-btn>/</v-btn></v-col>\n        </v-row> -->\n    </v-container>\n</template>\n\n<script>\n\nexport default{\n    props: {\n        Value: Number\n    },\n    data(){\n        return{\n            Value1: '',\n            Value2: '',\n            Ans: ''\n        }\n    },\n    watch:{\n        Ans(newVal, oldVal){\n            // const V1 = parseFloat(newVal)\n            // const V2 = parseFloat(oldVal)\n            if(isNaN(newVal)){\n                alert('The following Value input is invalid')\n                console.log(oldVal)\n            }\n        }\n    },\n    methods:{\n        reset: function(){\n           this.Value1=''\n           this.Value2=''\n           this.Ans=''\n        },\n        add: function(){\n            const sum = parseFloat(this.Value1) + parseFloat(this.Value2)\n            this.Ans = sum;\n        },\n        sub: function(){\n            const sum = parseFloat(this.Value1) - parseFloat(this.Value2)\n            this.Ans = sum;\n        },\n        multi: function(){\n            const sum = parseFloat(this.Value1) * parseFloat(this.Value2)\n            this.Ans = sum;\n        },\n        dev: function(){\n            const sum = parseFloat(this.Value1) / parseFloat(this.Value2)\n            this.Ans = sum;\n        },\n        // Equals: function(){\n        //     this.Ans = eval(this.Value)\n        //     console.log(this.Ans);\n        // }\n    }\n}\n</script>"],"mappings":"AAuDA;EACAA,KAAA;IACAC,KAAA,EAAAC;EACA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,MAAA;MACAC,GAAA;IACA;EACA;EACAC,KAAA;IACAD,IAAAE,MAAA,EAAAC,MAAA;MACA;MACA;MACA,IAAAC,KAAA,CAAAF,MAAA;QACAG,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAJ,MAAA;MACA;IACA;EACA;EACAK,OAAA;IACAC,KAAA,WAAAA,CAAA;MACA,KAAAX,MAAA;MACA,KAAAC,MAAA;MACA,KAAAC,GAAA;IACA;IACAU,GAAA,WAAAA,CAAA;MACA,MAAAC,GAAA,GAAAC,UAAA,MAAAd,MAAA,IAAAc,UAAA,MAAAb,MAAA;MACA,KAAAC,GAAA,GAAAW,GAAA;IACA;IACAE,GAAA,WAAAA,CAAA;MACA,MAAAF,GAAA,GAAAC,UAAA,MAAAd,MAAA,IAAAc,UAAA,MAAAb,MAAA;MACA,KAAAC,GAAA,GAAAW,GAAA;IACA;IACAG,KAAA,WAAAA,CAAA;MACA,MAAAH,GAAA,GAAAC,UAAA,MAAAd,MAAA,IAAAc,UAAA,MAAAb,MAAA;MACA,KAAAC,GAAA,GAAAW,GAAA;IACA;IACAI,GAAA,WAAAA,CAAA;MACA,MAAAJ,GAAA,GAAAC,UAAA,MAAAd,MAAA,IAAAc,UAAA,MAAAb,MAAA;MACA,KAAAC,GAAA,GAAAW,GAAA;IACA;IACA;IACA;IACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}