{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    CalMethod: {\n      type: String\n    },\n    btncolor: {\n      type: String,\n      default: 'primary'\n    }\n  },\n  methods: {\n    reset: function () {\n      this.method = '....';\n      this.Value1 = '';\n      this.Value2 = '';\n      this.Ans = '';\n    },\n    ToHistory(Symbol) {\n      this.history.push(`${this.Value1} ${Symbol} ${this.Value2} = ${this.Ans}`);\n    },\n    FloatParse() {\n      if (this.Ans === '') return; //if the Ans is empty dun parse\n      this.Ans = Math.round(this.Ans * 100) / 100;\n      this.ToHistory(this.method); // if the Ans already parse, just return\n    },\n\n    ADD: function () {\n      this.method = \"+\";\n      this.Ans = Number(this.Value1) + Number(this.Value2);\n      this.ToHistory('+');\n    },\n    SUB: function () {\n      this.method = \"-\";\n      this.Ans = Number(this.Value1) - Number(this.Value2);\n      this.ToHistory('-');\n    },\n    MULTI: function () {\n      this.method = \"&times;\";\n      this.Ans = Number(this.Value1) * Number(this.Value2);\n      this.ToHistory('&times;');\n    },\n    DEV: function () {\n      this.method = \"&divide;\";\n      this.Ans = Number(this.Value1) / Number(this.Value2);\n      this.ToHistory('&divide;');\n    }\n  }\n};","map":{"version":3,"names":["props","CalMethod","type","String","btncolor","default","methods","reset","method","Value1","Value2","Ans","ToHistory","Symbol","history","push","FloatParse","Math","round","ADD","Number","SUB","MULTI","DEV"],"sources":["src/components/BtnComponent.vue"],"sourcesContent":["<template>\n  <v-btn v-bind=\"$attrs\" v-on=\"$parent\" :color=\"btncolor\" v-html=\"CalMethod\"></v-btn>\n</template>\n\n<script>\nexport default{\n  props:{\n    CalMethod:{ type: String},\n    btncolor: {\n      type: String,\n      default: 'primary'\n    }\n  },\n  methods: {\n\t\treset: function () {\n\t\t\tthis.method = '....'\n\t\t\tthis.Value1 = '';\n\t\t\tthis.Value2 = '';\n\t\t\tthis.Ans = ''\n\t\t},\n\t\tToHistory(Symbol) {\n\t\t\tthis.history.push(`${this.Value1} ${Symbol} ${this.Value2} = ${this.Ans}`)\n\t\t},\n\t\tFloatParse() {\n\t\t\tif (this.Ans === '') return; //if the Ans is empty dun parse\n\t\t\tthis.Ans = Math.round(this.Ans * 100) / 100\n\t\t\tthis.ToHistory(this.method); // if the Ans already parse, just return\n\n\t\t},\n\t\tADD: function () {\n\t\t\tthis.method = \"+\"\n\t\t\tthis.Ans = Number(this.Value1) + Number(this.Value2);\n\t\t\tthis.ToHistory('+')\n\t\t},\n\t\tSUB: function () {\n\t\t\tthis.method = \"-\"\n\t\t\tthis.Ans = Number(this.Value1) - Number(this.Value2);\n\t\t\tthis.ToHistory('-')\n\t\t},\n\t\tMULTI: function () {\n\t\t\tthis.method = \"&times;\"\n\t\t\tthis.Ans = Number(this.Value1) * Number(this.Value2);\n\t\t\tthis.ToHistory('&times;')\n\t\t},\n\t\tDEV: function () {\n\t\t\tthis.method = \"&divide;\"\n\t\t\tthis.Ans = Number(this.Value1) / Number(this.Value2);\n\t\t\tthis.ToHistory('&divide;')\n\t\t},\n\n\t},\n}\n</script>"],"mappings":";AAKA;EACAA,KAAA;IACAC,SAAA;MAAAC,IAAA,EAAAC;IAAA;IACAC,QAAA;MACAF,IAAA,EAAAC,MAAA;MACAE,OAAA;IACA;EACA;EACAC,OAAA;IACAC,KAAA,WAAAA,CAAA;MACA,KAAAC,MAAA;MACA,KAAAC,MAAA;MACA,KAAAC,MAAA;MACA,KAAAC,GAAA;IACA;IACAC,UAAAC,MAAA;MACA,KAAAC,OAAA,CAAAC,IAAA,SAAAN,MAAA,IAAAI,MAAA,SAAAH,MAAA,WAAAC,GAAA;IACA;IACAK,WAAA;MACA,SAAAL,GAAA;MACA,KAAAA,GAAA,GAAAM,IAAA,CAAAC,KAAA,MAAAP,GAAA;MACA,KAAAC,SAAA,MAAAJ,MAAA;IAEA;;IACAW,GAAA,WAAAA,CAAA;MACA,KAAAX,MAAA;MACA,KAAAG,GAAA,GAAAS,MAAA,MAAAX,MAAA,IAAAW,MAAA,MAAAV,MAAA;MACA,KAAAE,SAAA;IACA;IACAS,GAAA,WAAAA,CAAA;MACA,KAAAb,MAAA;MACA,KAAAG,GAAA,GAAAS,MAAA,MAAAX,MAAA,IAAAW,MAAA,MAAAV,MAAA;MACA,KAAAE,SAAA;IACA;IACAU,KAAA,WAAAA,CAAA;MACA,KAAAd,MAAA;MACA,KAAAG,GAAA,GAAAS,MAAA,MAAAX,MAAA,IAAAW,MAAA,MAAAV,MAAA;MACA,KAAAE,SAAA;IACA;IACAW,GAAA,WAAAA,CAAA;MACA,KAAAf,MAAA;MACA,KAAAG,GAAA,GAAAS,MAAA,MAAAX,MAAA,IAAAW,MAAA,MAAAV,MAAA;MACA,KAAAE,SAAA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}